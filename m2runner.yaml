apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "./data"

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: magento-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: magento
  template:
    metadata:
      labels:
        app: magento
    spec:
      containers:
        - name: magerunnermysql
          image: magerunnermysql:latest
          # MYSQL configurations like user, password, etc. go here.
          volumeMounts:
            - name: mysql-storage
              mountPath: /var/lib/mysql

        - name: magerunnernginx
          image: magerunnernginx:latest
          ports:
            - containerPort: 80
          volumeMounts:
            - name: magento-code
              mountPath: /var/www/html

        - name: magerunnerphp
          image: magerunnerphp:latest
          ports:
            - containerPort: 9000
          volumeMounts:
            - name: magento-code
              mountPath: /var/www/html

        - name: magerunneropensearch
          image: magerunneropensearch:latest

        - name: rabbitmq
          image: rabbitmq:3.6
          # RabbitMQ configurations go here

        - name: varnish
          image: varnish:6
          ports:
            - containerPort: 6081

        - name: redis
          image: redis:7.0
          # Redis configurations go here

      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
        - name: magento-code
          hostPath:
            path: "./code"

---

# Expose Varnish with HTTPS as the main entry point
apiVersion: v1
kind: Service
metadata:
  name: magento-service
spec:
  selector:
    app: magento
  ports:
    - protocol: TCP
      port: 443
      targetPort: 6081

---

# Ingress to handle SSL termination and routing
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: magento-ingress
  annotations:
    # Use the NGINX Ingress Controller for SSL termination
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: dev.vossmarket.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: magento-service
            port:
              number: 443
  tls:
  - hosts:
    - dev.vossmarket.com
    secretName: magento-tls
